(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utilsAjax = require('./utils/Ajax');

var _utilsAjax2 = _interopRequireDefault(_utilsAjax);

var _optimizationsTree = require('./optimizations/Tree');

var _optimizationsTree2 = _interopRequireDefault(_optimizationsTree);

var _busBranch = require('./bus/Branch');

var _busBranch2 = _interopRequireDefault(_busBranch);

var _busTrail = require('./bus/Trail');

var _busTrail2 = _interopRequireDefault(_busTrail);

var _busRank = require('./bus/Rank');

var _busRank2 = _interopRequireDefault(_busRank);

var _utilsGrid = require('./utils/Grid');

var _utilsGrid2 = _interopRequireDefault(_utilsGrid);

var _uiTerrain = require('./ui/Terrain');

var _uiTerrain2 = _interopRequireDefault(_uiTerrain);

_utilsAjax2['default'].get('../data/map2.txt').then(init);

function init(data) {
  console.time('process');
  var list = data.split(' ');

  var matrix = [];
  var count = 0;

  for (var i = 0; i < 4; i++) {
    matrix[i] = [];
    for (var j = 0; j < 4; j++) {
      matrix[i].push(parseInt(list[count]));
      count++;
    }
  }

  for (var i = 0; i < matrix.length; i++) {
    for (var j = 0; j < matrix.length; j++) {
      if (!_optimizationsTree2['default'].get(i, j)) {
        _busBranch2['default'].walk(matrix, i, j, matrix[i][j], (0, _busTrail2['default'])());
      }
    }
  }

  var grid = _utilsGrid2['default'].create(matrix);

  /*
   * TODO: need to improve this method and the terrain generation
   * Pass true to fix the grid size.
   */
  var terrain = new _uiTerrain2['default'](grid.grid, grid.path, grid.rowStart, grid.colStart, true);

  console.timeEnd('process');
  console.log(_busRank2['default'].result(matrix));
}

},{"./bus/Branch":2,"./bus/Rank":3,"./bus/Trail":4,"./optimizations/Tree":6,"./ui/Terrain":7,"./utils/Ajax":8,"./utils/Grid":10}],2:[function(require,module,exports){
'use strict';

var Memoization = require('../optimizations/Memoization'),
    Tree = require('../optimizations/Tree'),
    Rank = require('../bus/Rank'),
    trail = require('../bus/Trail.js');

var Branch = {
  getEdge: function getEdge(matrix, row, column) {
    if (matrix[row] === undefined || matrix[row][column] === undefined) {
      return null;
    }

    return {
      row: row,
      column: column,
      value: matrix[row][column]
    };
  },

  getEdgeValues: function getEdgeValues(matrix, row, column) {
    var left = this.getEdge(matrix, row, column - 1),
        right = this.getEdge(matrix, row, column + 1),
        bottom = this.getEdge(matrix, row + 1, column),
        top = this.getEdge(matrix, row - 1, column);

    return {
      left: left, right: right, bottom: bottom, top: top
    };
  },

  walk: function walk(matrix, row, column, value, tail) {
    var branches = this.getEdgeValues(matrix, row, column);

    var count = 0;
    Object.keys(branches).forEach(function (key) {
      var item = branches[key];

      if (item && value > item.value) {
        var memo = Memoization.get(item.row, item.column);
        if (memo) {
          var trace = trail(tail.get());
          trace.add(row, column);

          trace = trace.get().concat(memo);

          Memoization.add(matrix, trace);
          Rank.add(matrix, trace);
          count++;
        } else {
          var trace = trail(tail.get());
          trace.add(row, column);

          Branch.walk(matrix, item.row, item.column, item.value, trace);

          count++;
        }
      }
    });

    if (count === 0) {
      var trace = trail(tail.get());
      trace.add(row, column);

      var history = trace.get();

      Rank.add(matrix, history);

      Memoization.add(matrix, history.slice(1, history.length));
    } else {
      Tree.add(row, column, value);
    }
  }
};

module.exports = Branch;

},{"../bus/Rank":3,"../bus/Trail.js":4,"../optimizations/Memoization":5,"../optimizations/Tree":6}],3:[function(require,module,exports){
'use strict';

var Drop = require('../utils/Drop');

var _store = [];

var Rank = {
  add: function add(matrix, trail) {
    if (_store.length === 0 || Drop.isHigher(matrix, trail, _store)) {
      _store = trail;
    }
  },

  get: function get() {
    return _store;
  },

  result: function result(matrix) {
    return {
      length: _store.length,
      drop: Drop.dropCalculation(matrix, _store)
    };
  }
};

module.exports = Rank;

},{"../utils/Drop":9}],4:[function(require,module,exports){
'use strict';

var Trail = function Trail(list) {
  var _store = [];

  if (list) {
    _store = _store.concat(list);
  }

  return {
    get: function get() {
      return _store;
    },

    add: function add(row, column) {
      _store.push([row, column]);
    },

    push: function push(row, column) {
      _store.unshift([row, column]);
    }
  };
};

module.exports = Trail;

},{}],5:[function(require,module,exports){
'use strict';

var Identity = require('../utils/Identity'),
    Matrix = require('../utils/Matrix'),
    Drop = require('../utils/Drop');

var _store = new Map();

var Memoization = {
  add: function add(matrix, trail) {
    if (!trail[0]) {
      return;
    }

    var trailPos = Matrix.getPosition(trail[0]),
        key = Identity.getKey(trailPos.row, trailPos.column);

    var memo = _store.get(key);
    if (memo) {
      if (Drop.isHigher(matrix, trail, memo)) {
        _store.set(key, trail);
      }
    } else {
      _store.set(key, trail);
    }
  },

  get: function get(row, column) {
    var key = Identity.getKey(row, column);

    return _store.get(key);
  }
};

module.exports = Memoization;

},{"../utils/Drop":9,"../utils/Identity":11,"../utils/Matrix":12}],6:[function(require,module,exports){
'use strict';

var Identity = require('../utils/Identity');

var _store = new Map();

var Tree = {
  add: function add(row, column, value) {
    var key = Identity.getKey(row, column);

    _store.set(key, value);
  },

  get: function get(row, column) {
    var key = Identity.getKey(row, column);

    return _store.get(key);
  }
};

module.exports = Tree;

},{"../utils/Identity":11}],7:[function(require,module,exports){
/*eslint-disable */

'use strict';

var Terrain = function Terrain(matrix, path, rowStart, colStart, normalize) {

  var width = window.innerWidth,
      height = window.innerHeight;

  var scene = new THREE.Scene();

  //var axes = new THREE.AxisHelper(200);
  //scene.add(axes);

  var camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);
  camera.position.set(0, -50, 50);

  var renderer = new THREE.WebGLRenderer();
  renderer.setClearColor(0xebebeb);
  renderer.setSize(width, height);

  var light = new THREE.AmbientLight(0x404040); // soft white light
  scene.add(light);

  var geometry = new THREE.PlaneGeometry(300, 300, matrix.length - 1, matrix.length - 1);

  for (var i = 0, l = geometry.vertices.length; i < l; i++) {
    var row = Math.floor(i / matrix.length);
    geometry.vertices[i].z = normalizeHeight(matrix[row][Math.floor(i % matrix[row].length)], normalize);
  }

  var map = new Map();
  var faceIndices = ['a', 'b', 'c', 'd'];
  var radius = 200;

  for (var i = 0; i < geometry.faces.length; i++) {
    var face = geometry.faces[i];

    var n = face instanceof THREE.Face3 ? 3 : 4;

    for (var j = 0; j < n; j++) {
      var vertexIndex = face[faceIndices[j]];

      var p = geometry.vertices[vertexIndex];
      var color = new THREE.Color(0xffffff);

      var value = 0;
      var found = path.some(function (item) {
        if (normalizeHeight(matrix[item[0] - rowStart][item[1] - colStart], normalize) == p.z) {
          return true;
        }

        return false;
      });

      if (found) {
        color.setHSL(0.200 * vertexIndex / geometry.vertices.length, 1.0, 0.5);

        map.set(p.z, p);
      } else {
        color.setHSL(0.0, (p.y / radius + 1) / 2, 0.2);
      }

      face.vertexColors[j] = color;
    }
  }

  //    var material = new THREE.MeshPhongMaterial({
  //        color: 0xdddddd,
  //        wireframe: true
  //    });

  var materials = [new THREE.MeshLambertMaterial({ color: 0xffffff, shading: THREE.FlatShading, vertexColors: THREE.VertexColors }), new THREE.MeshBasicMaterial({ color: 0x000000, shading: THREE.FlatShading, wireframe: true, transparent: true })];

  // var plane = new THREE.Mesh(geometry, material);
  var plane = THREE.SceneUtils.createMultiMaterialObject(geometry, materials);

  var points = {};

  map.forEach(function (data, key) {
    points[key] = data;
  });

  var points = Object.keys(points).sort(function (a, b) {
    return a - b;
  }).map(function (a) {
    return points[a];
  });

  console.log(points);

  var lineGeometry = new THREE.Geometry();

  Object.keys(points).forEach(function (a) {
    lineGeometry.vertices.push(new THREE.Vector3(points[a].x, points[a].y, points[a].z + 20));
  });

  var line = new THREE.Line(lineGeometry, new THREE.LineBasicMaterial({
    color: 0x00ff00,
    linewidth: 5
  }));

  plane.add(line);

  scene.add(plane);

  var controls = new THREE.TrackballControls(camera);

  document.getElementById('webgl').appendChild(renderer.domElement);

  render();

  function render() {
    controls.update();
    requestAnimationFrame(render);
    renderer.render(scene, camera);
  }

  function normalizeHeight(value, normalize) {
    if (!normalize) {
      return value * 15;
    }

    var result = Math.round(value / 65535 * 2470);

    return result > 0 ? result : value;
  }
};

module.exports = Terrain;

/*eslint-enable */

},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Ajax = {
  get: function get(url) {
    // Return a new promise.
    return new Promise(function (resolve, reject) {
      // Do the usual XHR stuff
      var req = new XMLHttpRequest();
      req.open('GET', url);

      req.onload = function () {
        // This is called even on 404 etc
        // so check the status
        if (req.status === 200) {
          // Resolve the promise with the response text
          resolve(req.response);
        } else {
          // Otherwise reject with the status text
          // which will hopefully be a meaningful error
          reject(Error(req.statusText));
        }
      };

      // Handle network errors
      req.onerror = function () {
        reject(Error('Network Error'));
      };

      // Make the request
      req.send();
    });
  }
};

exports['default'] = Ajax;
module.exports = exports['default'];

},{}],9:[function(require,module,exports){
'use strict';

var Matrix = require('./Matrix');

var Drop = {
  dropCalculation: function dropCalculation(matrix, trail) {
    return Matrix.getValue(matrix, trail[0]) - Matrix.getValue(matrix, trail[trail.length - 1]);
  },

  isHigher: function isHigher(matrix, newTrail, currentTrail) {
    var currentDrop = this.dropCalculation(matrix, currentTrail),
        trailDrop = this.dropCalculation(matrix, newTrail);

    if (newTrail.length === currentTrail.length && trailDrop > currentDrop) {
      return true;
    } else if (newTrail.length > currentTrail.length) {
      return true;
    }

    return false;
  }
};

module.exports = Drop;

},{"./Matrix":12}],10:[function(require,module,exports){
'use strict';

var Rank = require('../bus/Rank');

module.exports = {
  create: function create(matrix) {
    var length = Rank.result(matrix).length;
    var path = Rank.get();

    var half = path[Math.floor((path.length - 1) / 2)];

    var rowStart = half[0] - length;
    if (half[0] - length < 0) {
      rowStart = 0;
    }

    var rowEnd = half[0] + length;
    if (half[0] + length > matrix.length - 1) {
      rowEnd = matrix.length;
    }

    var colStart = half[1] - length;
    if (half[1] - length < 0) {
      colStart = 0;
    }

    var colEnd = half[1] + length;
    if (half[1] + length > matrix.length - 1) {
      colEnd = matrix.length;
    }

    var grid = [];
    var count = 0;
    for (var i = rowStart; i < rowEnd; i++) {
      grid[count] = [];
      for (var j = colStart; j < colEnd; j++) {
        grid[count].push(matrix[i][j]);
      }

      count++;
    }

    return {
      rowStart: rowStart,
      colStart: colStart,
      grid: grid,
      path: path
    };
  }
};

},{"../bus/Rank":3}],11:[function(require,module,exports){
'use strict';

module.exports = {
  getKey: function getKey(row, column) {
    return '_' + row + '_' + column;
  }
};

},{}],12:[function(require,module,exports){
'use strict';

module.exports = {
  getValue: function getValue(matrix, cell) {
    var position = this.getPosition(cell);

    return matrix[position.row][position.column];
  },

  getPosition: function getPosition(cell) {
    return {
      row: cell[0],
      column: cell[1]
    };
  }
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
